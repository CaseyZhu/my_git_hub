#####################################################################################################
## This file has been generated by SpyGlass:
## SpyGlass_version   : SpyGlass_vQ-2020.03-SP1
## SpyGlass_Home      : /EDA/synopsys/spyglass/SPYGLASS2020.03-SP1/SPYGLASS_HOME
## Date               : Thu Mar 17 10:19:51 2022
## Working Directory  : /project/STPU2/xuhaiyang/work/MPTopWrapper_forFS/runs/SpyGlass
## Created by         : xuhaiyang
##                    : Setting "/project/STPU2/xuhaiyang/work/MPTopWrapper_forFS/waiver/MPTopWrapper.lint.waiver.awl" as default waiver file
#####################################################################################################

########### Add waiver of Cache and Noc
waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {W287b} -msg {Instance output port * is not connected*} -comment {design do not use the output signal, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {FlopEConst} -msg {*is  always *abled*} -comment {signal tie const value, logic right, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {DefaultState} -msg {State Machine should have a default state} -comment {all state can reach, no need default, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {ResetFlop-ML} -msg {*has no set or reset*} -comment {data use dff without reset save area and power, zhuzhiqi,2022.03.17 }

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {W240} -msg {*declared but not read*} -comment {some signal no use, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {W71} -msg {*Case statement does not have a default clause*} -comment {all case listed, no need default, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {W362} -msg {*left expression* width * should match right expression*} -comment {tool will cut parameter's width to fit expression, zhuzhiqi,2022.03.17}

waive -ip { {CodaCacheTop} {mp_cache_split_top}  {noc_mp_ss_mp_noc_sub0_top} {noc_mp_ss_mp_noc_sub1_top} {mp_cache_to_hbm_top} } \
-rule {W528} -msg {*Variable * set but not read*} -comment {some signal not use, zhuzhiqi,2022.03.17}

waive -ip { {Mp_dffre} } \
-rule {NonConstReset-ML} -msg {Invalid reset condition, RHS should be explicit static value and not driven by signal/variable 'resetVal'*} \
-comment {level connection constant value, zhuzhiqi,2022.03.24}


########### Add waiver of Common and Lib
waive -du { {stl_sdpram} {stl_sdpram_cell} {stl_optree} {StcuDatPipe} {stsoc_cg} } \
-msg {Input * declared but not read*} \
-rule {W240} -comment {Part of the input is not used, Created by xuhaiyang on 03/16/22}

waive -du { {stl_sdpram} {stl_sdpram_cell} {stl_delay} {StcuClkgtCtl} {StcuRegister} {stl_syncfifo} } \
-msg {For operator * left expression: * width * should match right expression: * width *} \
-rule {W362} -comment {The compiler will automatically adapt the bit width, Created by xuhaiyang on 03/16/22}

waive -du { {stl_sdpram_cell} {stl_arbiter} {stl_spram_cell} {stl_spram_parity} {StcuRegister} } \
-msg {Variable * set but not read*} \
-rule {W528} -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22}

waive -file { {*stl_common.sv} } \
-msg {LHS: 'i' width 32 is greater than RHS: '1' width 1 in assignment*} \
-rule {W164b} -comment {The compiler will automatically adapt the bit width, Created by xuhaiyang on 03/16/22}

waive -du { {stl_optree} {stl_bitfinder} } \
-msg {LHS: * width * is greater than RHS: * width * in assignment*} \
-rule {W164b} -comment {The compiler will automatically adapt the bit width, Created by xuhaiyang on 03/16/22}

waive -du { {stl_arbiter} } \
-msg {LHS: * width * is less than RHS: * width * in assignment*} \
-rule {W164a} -comment {The compiler will automatically adapt the bit width, Created by xuhaiyang on 03/16/22}

waive -du { {stl_arbiter} } \
-msg {Rhs width * with shift * is more than lhs width *, this may cause overflow*} \
-rule {W486} -comment {Checked and will not overflow, Created by xuhaiyang on 03/16/22}

waive -du { {stl_bitfinder} } \
-msg {Signal outoffs is being assigned multiple times ( assignment within same for-loop ) in same always block*} \
-rule {W415a} -comment {Will not affect the calc results, Created by xuhaiyang on 03/16/22}

waive -du { {stl_bitfinder} } \
-msg {For operator (%), left expression: \"(OFFS_W'(i) + startoffs)\" width 7 should match right expression: \"NDATA_W\" width 2.*} \
-rule {W116} -comment {Will not affect the calc results, Created by xuhaiyang on 03/16/22}

waive -du { {stl_syncfifo_lite} {StcuNocRspFifo} } \
-msg {Instance output port * is not connected} \
-rule {W287b} -comment {Top-level module is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {StcuDatFwdPipe} {StcuDatBwdPipe} {stl_sdpram} } \
-msg {Flip-flop * has no set or reset*} \
-comment {DFF does not need to set/reset all, Created by xuhaiyang on 03/16/22} 

waive -du { {stl_optree} } -msg {Same operand 'rmlvls' used on both sides of an assignment} \
-rule { {SelfAssignment-ML} } -comment {Will not affect the calc results, Created by xuhaiyang on 03/16/22} 

waive -du { {stl_optree} } -msg {Illegal value as case item} \
-rule { {W337} } -comment {Can be used normally, Created by xuhaiyang on 03/16/22} 

waive -du { {stl_syncfifo_reg} } -msg {Empty statement} \
-rule { {W193} } -comment {Assertion have no impact on the impl, Created by xuhaiyang on 03/16/22} 

waive -file { {*stl_common.sv} } -msg {Return type width '32' is greater than return value width '7' in function 'F_MemCfgW'*} \
-rule { {W416} } -comment {Confirmed to be false positive, Created by xuhaiyang on 03/16/22} 

waive -du { {StcuAxiIdStall} } \
-msg {For operator (*), left expression: \"*iduse_cnt[i]*\" width 8 should match right expression: \"1'(*)\" width 1*} \
-rule {W116} -comment {Use 1 bits adder will save power && area, zhuzhiqi,2022.03.24}

waive -du { {StcuCacheBp2To1} } \
-msg {LHS: 'ch_m_if.*_id' width 6 is less than RHS: 'ch_o_if.*_id[7:0] ' width 8 in assignment*} \
-rule {W164a} -comment {The compiler will automatically adapt the bit width, Created by xuhaiyang on 03/16/22}

waive -du { {stl_sparecell}} -rule { {W287b} } \
-msg {Instance output port* is not connected} -comment { gate cell port not connected in spare cell}

waive -du { {stl_sparecell}} -rule { {W240} } \
-msg {Input* declared but not read*} -comment { clk,rst not connect in spare cell}

########### Add waiver of MPTop
waive -du { {MPTopWrapper} } -msg {Variable 'hbm_phy_cfg_if.pprot[2:0]' set but not read*} \
-rule { {W528} } -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPTopWrapper} } -msg {Variable 'hbm_cfg_if.pprot[2:0]' set but not read*}\
-rule { {W528} } -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPTop} } -msg {Variable 'i_MpCfgRegime_Cm_root_Clk*' set but not read*} \
-rule { {W528} }  -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPTop} } -msg {Variable 'i_MpNocRegime_Cm_root_Clk*' set but not read*} \
-rule { {W528} }  -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPReg} } -msg {Input 'ctrl_cfg_if.*' declared but not read*} \
-rule { {W240} }  -comment {Part of the input is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPInst0} } -msg {Instance output port 'i_MpCfgRegime_Cm_root_Clk' is not connected} \
-rule {W287b} -comment {Top-level module is not used, Created by xuhaiyang on 03/29/22} 

waive -du { {MPInst0} } -msg {Instance output port 'i_MpCfgRegime_Cm_root_Clk_Tm' is not connected} \
-rule {W287b} -comment {Top-level module is not used, Created by xuhaiyang on 03/29/22} 

waive -du { {MPInst0} } -msg {Instance output port 'i_MpCfgRegime_Cm_root_Clk_RstN' is not connected} \
-rule {W287b} -comment {Top-level module is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {MPInst0} } -msg {Instance output port 'i_MpNocRegime_Cm_root_Clk_Tm' is not connected} \
-rule {W287b} -comment {Top-level module is not used, Created by xuhaiyang on 03/29/22} 

waive -du { {MPInst0} } -msg {Input 'irq_cache_c' declared but not read*} \
-rule {W240} -comment {Part of the input is not used, Created by xuhaiyang on 03/29/22} 

#waive -file { {*rtl.GaterCell.v} } -msg {Input * declared but not read*} \
#-rule { {W240} }  -comment {Part of the input is not used, Created by xuhaiyang on 03/16/22} 

waive -file { {*syn.GaterCell.v} } -msg {Input * declared but not read*} \
-rule { {W240} }  -comment {Part of the input is not used, Created by xuhaiyang on 04/16/22} 

########### Add waiver of ATE
waive -msg {Enable pin EN on Flop *.ate_inst.exec_inst.*dly_inst*} \
-rule {FlopEConst} -comment {Port ena is always enabled, Created by xuhaiyang on 03/16/22} 

waive -msg {Enable pin EN on Flop *.ate_inst.exec_inst.\ALU[*].alu_inst .fpadd_inst*} \
-rule {FlopEConst} -comment {Port ena is always enabled, Created by xuhaiyang on 03/16/22} 

waive -du { {AxiLite2Reg} {MPATEAlu} {MPATEExec} {MPATETop} {dwfc_fp_add_dr_rt} } \
-msg {Instance output port * is not connected} \
-rule {W287b} -comment {Checked and top-level module is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {StcuRegister} {MPATEAlu} {MPATEExec} {MPATETop} } \
-msg {Variable * set but not read*} \
-rule {W528} -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22}

waive -du { {stl_delay} {StcuRegister} {AxiLite2Reg} } \
-msg {Input * declared but not read*} \
-rule {W240} -comment {Part of the input is not used, Created by xuhaiyang on 03/16/22}

waive -du { {DWFC_fp_add_dr_23_8_1_1_1} } \
-msg {Case statement does not have a default clause and is not preceded by assignment of target signal in combinational block*} \
-rule {W71} -comment {Created by xuhaiyang on 03/16/22}


########### Add waiver of DMA
waive -du { {mp_dma_cfg_parse} {mp_dma_reg_cfg_top} {mp_dma_engine} {mp_dma_dispatcher} } \
-msg {Instance output port * is not connected} \
-rule { {W287b} } -comment {Port is not used so not connected, Created by xuhaiyang on 03/16/22} 

waive -du { {mp_dma_cfg_parse} {mp_dma_dispatcher} } \
-msg {Input * declared but not read*} \
-rule { {W240} } -comment {Part of the input is not used, Created by xuhaiyang on 03/16/22} 

waive -du { {mp_dma_dispatcher} } -msg {Variable 'traffic_info_fifo_rdata.last_traffic_flag' set but not read*} \
-rule { {W528} } -comment {Part of the signal is not used, Created by xuhaiyang on 03/16/22} 

waive -du {  {mp_dma_top}  }  -msg {Variable 'gt_mask_n' set but not read*} \
-rule {  {W528}  }  -comment {Part of the signal is not used, Created by xuhaiyang on 04/20/22} 

waive -du { {mp_dma_rr_arbit} } -msg {Signal *_chn_* is being assigned multiple times ( assignment within same for-loop ) in same always block [Hierarchy: '*mp_dma_rr_arbit']} \
-rule { {W415a} } -comment {Checked and last time is right, Created by xuhaiyang on 03/16/22} 

waive -msg {Enable pin EN on Flop *(connected to *.u_dma_in_dly .\genblk1[0].u_pipe .r_pipe_inst.b_rdy)} \
-rule {  {FlopEConst}  }  -comment {MP-DMA support the ost depth is 128, and has enough ram storage, Created by xuhaiyang on 04/20/22} 


########### Add waiver of UMM
waive -du { {mp_umm_arb}} -rule { {W287b} } -msg {Instance output port* is not connected} -comment { unuse count/optid/wr_full port unconnected of stl_arbiter}
waive -du { {mp_umm_axi_lite_parse}} -rule { {W287b} } -msg {Instance output port 'count' is not connected} -comment { unuse port unconnected of stl_syncfifo}
waive -du { {mp_umm_axi_lite_parse}} -rule { {W240} } -msg {Input* declared but not read.*} -comment {input port w_strb/aw_prot/ar_prot not read}
waive -du { {mp_umm_axi_lite_parse}} -rule { {W362} } -comment { output interface port not read}
waive -du { {mp_umm_axi_lite_parse}} -rule { {STARC05-1.3.1.3} } -comment { unuse port unconnected of stl_syncfifo}
waive -du { {mp_umm_logic}} -rule { {W116} } -msg {For operator (-), left expression: "a*addr_s[35:0] " width 36 should match right expression: "(1 << HBML_ADDR_W)" width 32.*} -comment {HBML addr expression with param unmatch, no impact function }
waive -du { {mp_umm_logic}} -rule { {W116} } -msg {For operator (+), left expression: "a*addr_vf_base" width 37 should match right expression: "a*addr_vf_offset" width 36.*} -comment {aw/ar_vf_offset addr width no match, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "5'd20" width 5 should match right expression: "hbm_grnlrt_exp" width 3.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "34" width 6 should match right expression: "hbmsize_r" width 2.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (-), left expression: "(34 + hbmsize_r)" width 6 should match right expression: "hbm_grnlrt" width 5.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (-), left expression: "hbm_size_full" width 16 should match right expression: "hbml_size_full" width 15.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "14" width 4 should match right expression: "hbmsize_r" width 2.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (-), left expression: "(1 << (14 + hbmsize_r))" width 32 should match right expression: "(HBML_SIZE << 10)" width 12.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "15'h0600" width 15 should match right expression: "(l2bufsize_r << 2)" width 8.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "(15'h4200 << 2)" width 15 should match right expression: "hbmh_size_loader" width 17.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "(l2bufctrl_baseaddr_r[gid] << L2BUF_GRNLRT_DEF)" width 15 should match right expression: "{ ADDR_W{ 1'b1} } " width 37.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "((15'h0600 + l2bufctrl_size_r[gid]) - 'h1)" width 15 should match right expression: "{ (ADDR_W - 20){ 1'b0} } " width 17.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "(((15'h4000 << 2) + (hbmlctrl_size_r[gid] << hbm_grnlrt_exp)) - 'h1)" width 15 should match right expression: "{ (ADDR_W - 20){ 1'b0} } " width 17.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "(hbmlctrl_baseaddr_r[gid] << hbm_grnlrt)" width 15 should match right expression: "{ ADDR_W{ 1'b1} } " width 37.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "(((15'h4200 << 2) + (hbmhctrl_size_r[gid] << hbm_grnlrt_exp)) - 'h1)" width 15 should match right expression: "{ (ADDR_W - 20){ 1'b0} } " width 17.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (?:), left expression: "(hbmhctrl_baseaddr_r[gid] << hbm_grnlrt)" width 15 should match right expression: "{ ADDR_W{ 1'b1} } " width 37.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W116} } -msg {For operator (+), left expression: "((l2bufsize_r * 4) / 8)" width 8 should match right expression: "(* < (l2bufsize_r % 8))" width 1.*} -comment { operator expression unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W164a} } -msg {LHS: 'hbm_size_full' width 16 is less than RHS: '(1 << ((34 + hbmsize_r) - hbm_grnlrt))' width 32 in assignment*} -comment { hbm_size_full expression width unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W164a} } -msg {LHS: 'hbml_size_full' width 15 is less than RHS: '(HBML_SIZE << (30 - hbm_grnlrt))' width 32 in assignment*} -comment { hbm_size_full expression width unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W164a} } -msg {LHS: 'hbmh_size_full' width 15 is less than RHS: '(hbm_size_full - hbml_size_full)' width 16 in assignment*} -comment { hbm_size_full expression width unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W164b} } -msg {LHS* is greater than RHS*} -comment { quickcfg expression width unmatch, no impact function }
waive -du { {mp_umm_reg}} -rule { {W486} } -msg {Rhs width '32' with shift (Expr: '(1 << ((34 + hbmsize_r) - hbm_grnlrt))') is more than lhs width '16' (Expr: 'hbm_size_full'), this may cause overflow*} -comment { checked will not overflow }
waive -du { {mp_umm_reg}} -rule { {W486} } -msg {Rhs width '32' with shift (Expr: '(HBML_SIZE << (30 - hbm_grnlrt))') is more than lhs width '15' (Expr: 'hbml_size_full'), this may cause overflow*} -comment { checked will not overflow }
waive -du { {mp_umm_reg}} -rule { {checkNetDriver} } -msg {signal *unvalid_cfg[0] does not have any driver} -comment { unused bit0 of unvalid_cfg }


########### Add waiver, MP unused this code, refer to scp_ss.lint.waiver.awl, "-du {  {dmac_parameters_64bit}  }" => "-file {  {*dmac_parameters_64bit.vic}  }"
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"128\" width 8 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (<), left expression: \"128\" width 8 should match right expression: \"DATA_BITS\" width 7 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"256\" width 9 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (<), left expression: \"256\" width 9 should match right expression: \"DATA_BITS\" width 7 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"512\" width 10 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (>=), left expression: \"4\" width 3 should match right expression: \"NUM_WR_CHNL\" width 2 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
#waive -du {  {dmac_parameters_64bit}  }  -msg {For operator (>=), left expression: \"8\" width 4 should match right expression: \"NUM_WR_CHNL\" width 2 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by zhangguodong1 on 01-Apr-2022 13:15:28} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"128\" width 8 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (<), left expression: \"128\" width 8 should match right expression: \"DATA_BITS\" width 7 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"256\" width 9 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (<), left expression: \"256\" width 9 should match right expression: \"DATA_BITS\" width 7 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (<=), left expression: \"DATA_BITS\" width 7 should match right expression: \"512\" width 10 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (>=), left expression: \"4\" width 3 should match right expression: \"NUM_WR_CHNL\" width 2 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
waive -file {  {*dmac_parameters_64bit.vic}  }  -msg {For operator (>=), left expression: \"8\" width 4 should match right expression: \"NUM_WR_CHNL\" width 2 [Hierarchy: '.']}  -rule {  {W362}  }  -comment {Created by xuhaiyang on 18-Apr-2022 15:36:24} 
